// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Google.GData.Client;
using Google.GData.Spreadsheets;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace MTUnity.GoogleAPI {
	public class MTWorksheet {
		public WorksheetEntry sheet;

		private Dictionary<string, CellEntry> _cellsA1;
		private Dictionary<string, CellEntry> _cellsRC;

		public MTWorksheet (WorksheetEntry sheet, SpreadsheetsService service) {
			this.sheet = sheet;

			// parse cells
			CellQuery cellQuery = new CellQuery(sheet.CellFeedLink);
			CellFeed cellFeed = service.Query(cellQuery);

			_cellsA1 = new Dictionary<string, CellEntry>();
			_cellsRC = new Dictionary<string, CellEntry>();
			
			// Iterate through each cell, printing its value.
			foreach (CellEntry cell in cellFeed.Entries)
			{
				_cellsA1.Add(cell.Title.Text, cell);
				_cellsRC.Add(cell.Id.Uri.Content.Substring(cell.Id.Uri.Content.LastIndexOf("/") + 1), cell);
			}
		}

		public uint RowCount {
			get {
				return sheet.Rows;
			}
		}

		public bool HasCell(int row, int col) {
			string name = "R" + row + "C" + col;
			return _cellsRC.ContainsKey(name);
		}

		public bool HasCell(string address) {
			return _cellsA1.ContainsKey(address);
		}

		/**
		 * Row and Column start from 1
		 */
		public CellEntry GetCell(int row, int col) {
			string name = "R" + row + "C" + col;
			if (_cellsRC.ContainsKey(name)) {
				return _cellsRC[name];
			} else {
				Debug.Log("Cannot find cell at " + row + "," + col + " of sheet " + sheet.Title.Text + "!");
				return null;
			}
		}

		public CellEntry GetCell(string address) {
			if (_cellsA1.ContainsKey(address)) {
				return _cellsA1[address];
			} else {
				Debug.Log("Cannot find cell at " + address + " of sheet " + sheet.Title.Text + "!");
				return null;
			}
		}

		public string GetStringValue(int row, int col) {
			CellEntry cell = GetCell(row, col);
			return cell == null ? "" : cell.Value;
		}

		public string GetStringValue(string address) {
			CellEntry cell = GetCell(address);
			return cell == null ? "" : cell.Value;
		}

		public ulong GetULongtValue(int row, int col) {
			return ParseUlong(GetStringValue(row, col), row + "," + col);
		}

		public ulong GetULongtValue(string address) {
			return ParseUlong(GetStringValue(address), address);
		}

		public int GetIntValue(int row, int col) {
			return ParseInt(GetStringValue(row, col), row + "," + col);
		}

		public int GetIntValue(string address) {
			return ParseInt(GetStringValue(address), address);
		}
		
		public float GetFloatValue(int row, int col) {
			CellEntry cell = GetCell(row, col);
			return cell == null ? 0.0f : ParseFloat(cell.NumericValue, row + "," + col);
		}
		
		public float GetFloatValue(string address) {
			CellEntry cell = GetCell(address);
			return cell == null ? 0.0f : ParseFloat(cell.NumericValue, address);
		}

		int ParseInt(string value, string address) {
			int result;
			if (Int32.TryParse(value, out result)) {
				return result;
			} else {
				Debug.Log("Cannot parse int value (" + value + ") at " + address + " of sheet " + sheet.Title.Text + "!");
				return 0;
			}
		}

		ulong ParseUlong(string value, string address) {
			ulong result;
			if (UInt64.TryParse(value, out result)) {
				return result;
			} else {
				Debug.Log("Cannot parse ulong value (" + value + ") at " + address + " of sheet " + sheet.Title.Text + "!");
				return 0;
			}
		
		}

		float ParseFloat(string value, string address) {
			double result;
			if (Double.TryParse(value, out result)) {
				return (float)result;
			} else {
				Debug.Log("Cannot parse float value (" + value + ") at " + address + " of sheet " + sheet.Title.Text + "!");
				return 0;
			}
		}
	}
}
